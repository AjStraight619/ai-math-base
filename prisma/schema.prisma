// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  chats         Chat[]
  folders      Folder[]

}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Chat {
  id        String   @id @default(uuid())
  userId    String
  name      String
  messages  Message[]
  tags      Tag[]
  subjects  Subject[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  content   String
  role     Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat      Chat     @relation(fields: [chatId], references: [id])
  
}


model Tag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  chats     Chat[]
  notes     Note[]
  folders   Folder[]
}

model Subject {
  id        String   @id @default(uuid())
  chatId    String?  
  folderId  String?
  name      String
  chat      Chat?    @relation(fields: [chatId], references: [id])
  folder    Folder?   @relation(fields: [folderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Folder {
  id        String   @id @default(uuid())
  userId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  notes     Note[]
  tags      Tag[]
  subjects Subject[]
  user      User     @relation(fields: [userId], references: [id])
}


model Note {
  id        String   @id @default(uuid())
  folderId  String
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  folder    Folder   @relation(fields: [folderId], references: [id])
  tags      Tag[]

  NoteContent NoteContent[]
}


model NoteContent {
  id        String   @id @default(uuid())
  userId    String
  content   String   @db.Text
  Note      Note?    @relation(fields: [noteId], references: [id])
  noteId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  system
  user
  assistant
  function
  data
  tool
}
